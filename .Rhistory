predict(model.1, interval="prediction", level=0.95)
summary(model.1)
qt(0.5, 12)
pt(0.5, 12)
pt(5, 12)
pt(1.4142, 60)
1-pt(1.4142, 60)
pchisq(0.5, 10)
pchisq(1, 10)
pchisq(2, 10)
pt(0.5, 12)
pt(5, 12)
pt(0.5, 11)
setwd("C:/Users/akshu/Desktop/STAT 311/R Assignments/R2")
setwd("C:/Users/akshu/Desktop/STAT 311/R Assignments/R2")
library(knitr)
library(dplyr)
library(ggplot2)
library(RcmdrMisc)
library(RcmdrMisc)
install.packages("RcmdrMisc")
library(RcmdrMisc)
knitr::opts_chunk$set(echo = TRUE)
SHOW_SOLUTIONS = TRUE
```{r setup, include=TRUE}
library(ggplot2)
library(RcmdrMisc)
knitr::opts_chunk$set(echo = TRUE)
SHOW_SOLUTIONS = TRUE
library(knitr)
library(dplyr)
library(ggplot2)
library(RcmdrMisc)
knitr::opts_chunk$set(echo = TRUE)
SHOW_SOLUTIONS = TRUE
library(knitr)
library(dplyr)
library(ggplot2)
library(RcmdrMisc)
knitr::opts_chunk$set(echo = TRUE)
SHOW_SOLUTIONS = TRUE
D.df <- read.csv("Diamonds.csv", header=TRUE, as.is=TRUE)
glimpse(D.df)
#D.df$Color <- as.factor(D.df$Color)
#D.df$Clarity <- as.factor(D.df$Clarity)
#D.df$Rater <- as.factor(D.df$Rater)
#glimpse(D.df)
D.df <- read.csv("Patient_Data.csv", header=TRUE, as.is=TRUE)
glimpse(D.df)
#D.df$Color <- as.factor(D.df$Color)
#D.df$Clarity <- as.factor(D.df$Clarity)
#D.df$Rater <- as.factor(D.df$Rater)
glimpse(D.df)
D.df <- read.csv("Patient_Data.csv", header=TRUE, as.is=TRUE)
glimpse(D.df)
D.df$Sex <- as.factor(D.df$Sex)
D.df$MaritalStat <- as.factor(D.df$MaritalStat)
glimpse(D.df)
(tc.summary <- summary(D.df$TotChol)) # gives a six number sample summaries
(tc.sd <- sd(D.df$TotChol)) # gives sample standard deviation
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
mean = mean(TotChol, na.rm=TRUE),
SD = sd(TotChol, na.rm=TRUE)))
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
unlink('R2_Akshita Gundavarapu_cache', recursive = TRUE)
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
hist(D.df$TotChol, main="", xlab="Total Cholestrol")
boxplot(D.df$TotChol, ylab="Total Cholestrol ")
boxplot(D.df$TotChol ~ D.df$Sex, ylab="Total Cholestrol",
xlab = "Sex")
# get contingency table with counts
(tab2 <- table(D.df$Color, D.df$Rater))
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
(tab1 <- table(D.df$Color))
(tab1PCT <- round(tab1/sum(tab1) * 100,1))
prop.table(tab1) #get proportions
prop.table(tab1) * 100 # get percentages
round(prop.table(tab1) * 100, 1) # round percentages to one decimal place
# get contingency table with counts
(tab2 <- table(D.df$MaritalStat, D.df$Sex))
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
round(prop.table(tab2) * 100, 1)
tab3 <- round(prop.table(tab2) * 100, 1)
tab3
# get contingency table with joint percentages
# rounded to one decimal place
tab3 <- prop.table(tab2) * 100
tab3
# get contingency table with joint percentages
# rounded to one decimal place
tab3 <- prop.table(tab2) *100
tab3
# get contingency table with counts
(tab2 <- table(D.df$Color, D.df$Rater))
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
# get contingency table with joint percentages
# rounded to one decimal place
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
# get contingency table with joint percentages
# rounded to one decimal place
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
# get conditional column percentages
(Condcol.pct <- round(proapply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
tab2
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
# get contingency table with joint percentages
# rounded to one decimal place
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
rowCounts(tab2, digits=1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
# get contingency table with joint percentages
# rounded to one decimal place
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 2)
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) , 2)
# get contingency table with counts
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab2)*100
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab2)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
# get contingency table with counts
(tab2 <- table(D.df$Color, D.df$Rater))
# get contingency table with joint percentages
# rounded to one decimal place
round(prop.table(tab2) * 100, 1)
# get conditional row percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab2)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
# get conditional column percentages
(Condcol.pct <- round(prop.table(tab2, margin=2) * 100, 1))
apply(Condcol.pct, 2, sum)
# get similar things using the colPercents and rowPercents
# functions in the RcmdrMisc package. You will need to install
# the package. The library call is already in the setup block.
rowPercents(tab2, digits=1)
colPercents(tab2, digits=1)
(tab2 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab2)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
(Condrow.pct <- round(prop.table(tab2, margin=1) * 100, 1))
apply(Condrow.pct, 1, sum)
(tab1 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab1)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
tab2 <- (Condrow.pct <- round(prop.table(tab1, margin=1) * 100, 1))
(tab1 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab1)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
tab2 <- (Condrow.pct <- round(prop.table(tab1, margin=1) * 100, 1))
tab2[1]
(tab1 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab1)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
tab2 <- (Condrow.pct <- round(prop.table(tab1, margin=1) * 100, 1))
tab2[1:4]
(tab1 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab1)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
tab2 <- (Condrow.pct <- round(prop.table(tab1, margin=1) * 100, 1))
tab2
tab2[1:4]
(tab1 <- table(D.df$Sex, D.df$MaritalStat))
prop.table(tab1)*100
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
tab2 <- (Condrow.pct <- round(prop.table(tab1, margin=1) * 100, 1))
tab2
tab2[1,]
marginal_percentage_D <- ((11+13)/100)*100
marginal_percentage_M <- ((20+14)/100)*100
marginal_percentage_S <- ((9+17)/100)*100
marginal_percentage_W <- ((10+6)/100)*100
marginal_percentages <- c(marginal_percentage_D, marginal_percentage_M, marginal_percentage_S, marginal_percentage_W)
marginal_percentages
tab2 <- (Condrow.pct <- round(prop.table(tab1, margin=1) * 100, 1))
tab2[1,]
# You pass the counts to barplot by using the table function
# Using tab2 saved above (in the contingency tables chunk) for joint counts of Color and Rater
barplot(tab1)
# You pass the counts to barplot by using the table function
# Using tab2 saved above (in the contingency tables chunk) for joint counts of Color and Rater
barplot(tab2, legend.text=c("Female","Male"), beside=TRUE)
314/1020
plot(D.df$TotChol, D.df$Weight, xlab="Total Cholestrol (mg/dL)", ylab="Weight (pounds)")
#b)
cor(D.df$TotChol, D.df$Weight)
# use lm to fit a linear model
lm.out <- lm(D.df$Weight ~ D.df$TotChol) # lm(y ~ x)
summary(lm.out)
# replot the data and add the fitted regression line
#plot(PriceLT10$Price, PriceLT10$Weight, xlab="Price (Singapore Dollars)",
#     ylab="Weight (Carat)")
#abline(lm.out, col="blue", lwd=2)
#a)
plot(D.df$TotChol, D.df$Weight, xlab="Total Cholestrol (mg/dL)", ylab="Weight (pounds)")
#b)
cor(D.df$TotChol, D.df$Weight)
#c)
lm.out <- lm(D.df$Weight ~ D.df$TotChol)
summary(lm.out)
#a)
plot(D.df$Weight, D.df$TotChol, xlab="Weight (pounds)", ylab="Total Cholestrol (mg/dL)")
#b)
cor(D.df$TotChol, D.df$Weight)
#c)
lm.out <- lm(D.df$Weight ~ D.df$TotChol)
summary(lm.out)
library(knitr)
library(dplyr)
#library(ggplot2)
#library(RcmdrMisc)
knitr::opts_chunk$set(echo = TRUE)
SHOW_SOLUTIONS = TRUE
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
hist(D.df$TotChol, main="", xlab="Total Cholestrol (mg/dL)")
boxplot(D.df$TotChol, ylab="Total Cholestrol (mg/dL)")
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
hist(D.df$TotChol, main="", xlab="Total Cholestrol (mg/dL)", bins = 20)
boxplot(D.df$TotChol, ylab="Total Cholestrol (mg/dL)")
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
hist(D.df$TotChol, main="", xlab="Total Cholestrol (mg/dL)", bin = 20)
boxplot(D.df$TotChol, ylab="Total Cholestrol (mg/dL)")
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
hist(D.df$TotChol, main="", xlab="Total Cholestrol (mg/dL)", breaks = 20)
boxplot(D.df$TotChol, ylab="Total Cholestrol (mg/dL)")
(sum.weight <- D.df %>% summarize(Min = min(TotChol, na.rm=TRUE),
Q1 = quantile(TotChol, 0.25, na.rm=TRUE),
Median = quantile(TotChol, 0.50,
na.rm=TRUE),
Q3 = quantile(TotChol, 0.75, na.rm=TRUE),
Max = max(TotChol, na.rm=TRUE),
Mean = mean(TotChol, na.rm=TRUE),
Standard_deviation = sd(TotChol, na.rm=TRUE)))
hist(D.df$TotChol, main="", xlab="Total Cholestrol (mg/dL)", breaks = 10)
boxplot(D.df$TotChol, ylab="Total Cholestrol (mg/dL)")
boxplot(D.df$TotChol ~ D.df$Sex, ylab="Total Cholestrol (mg/dL)",
xlab = "Sex")
barplot(tab2, legend.text=c("Female","Male"), beside=TRUE)
barplot(tab2, legend.text=c("Female","Male"), beside=TRUE)
barplot(tab2, legend.text=c("Female","Male"), beside=TRUE)
#a)
plot(D.df$Weight, D.df$TotChol, xlab="Weight (pounds)", ylab="Total Cholestrol (mg/dL)")
#b)
cor(D.df$TotChol, D.df$Weight)
#c)
lm.out <- lm(D.df$Weight ~ D.df$TotChol)
summary(lm.out)
